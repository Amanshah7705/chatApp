// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  username      String
  email         String   @unique
  password      String
  chatsSent     Chat[]   @relation("Source")
  chatsReceived Chat[]   @relation("ReceivedChats")
  groups        Group[]  @relation("partofgroup")
  admin         Group[]  @relation("admins")
  LoginUser     String[]
  socketGroup   Socket[] @relation("usersocket")
}

model Socket {
  id       Int    @id @default(autoincrement())
  socketId String
  userId   Int
  user     User   @relation("usersocket", fields: [userId], references: [id])
}

model Chat {
  id            Int      @id @default(autoincrement())
  text          String
  sourceId      Int
  source        User     @relation("Source", fields: [sourceId], references: [id], onDelete: Cascade)
  destinationId Int?
  destination   User?    @relation("ReceivedChats", fields: [destinationId], references: [id], onDelete: Cascade)
  groupId       Int?
  group         Group?   @relation("chat", fields: [groupId], references: [id])
  createdAt     DateTime @default(now())
}

model Group {
  id        Int      @id @default(autoincrement())
  name      String
  members   User[]   @relation("partofgroup")
  admin     User[]   @relation("admins")
  chats     Chat[]   @relation("chat")
  createdAt DateTime @default(now())
}
